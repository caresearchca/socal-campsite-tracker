#!/usr/bin/env python3
"""
Quick deployment script using DigitalOcean MCP to get the campsite tracker online.
This will create a real deployment that you can access while away.
"""

import os
import sys
import json
import subprocess
import time
from pathlib import Path

def run_command(cmd, description=""):
    """Run a command and return success status."""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=60)
        if result.returncode == 0:
            print(f"‚úÖ {description} - Success")
            return True, result.stdout
        else:
            print(f"‚ùå {description} - Failed: {result.stderr}")
            return False, result.stderr
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} - Timed out")
        return False, "Timeout"
    except Exception as e:
        print(f"üí• {description} - Error: {e}")
        return False, str(e)

def check_mcp_config():
    """Check if DigitalOcean MCP is configured."""
    mcp_config_path = Path.home() / '.mcp.json'
    if mcp_config_path.exists():
        with open(mcp_config_path) as f:
            config = json.load(f)
            if 'digitalocean' in config.get('mcpServers', {}):
                print("‚úÖ DigitalOcean MCP is configured")
                return True
    print("‚ùå DigitalOcean MCP not found in config")
    return False

def create_simple_deployment():
    """Create a simple deployment configuration."""
    
    # Create a simple app spec
    app_spec = {
        "name": "socal-campsite-tracker",
        "services": [
            {
                "name": "web",
                "environment_slug": "python",
                "instance_count": 1,
                "instance_size_slug": "basic-xxs",
                "source_dir": "/",
                "run_command": "python3 -m http.server $PORT",
                "http_port": 8080,
                "routes": [{"path": "/"}],
                "health_check": {
                    "http_path": "/demo.html"
                }
            }
        ],
        "static_sites": [
            {
                "name": "dashboard",
                "source_dir": "/",
                "build_command": "echo 'No build needed'",
                "output_dir": "/",
                "index_document": "demo.html",
                "routes": [{"path": "/"}]
            }
        ]
    }
    
    with open('app.yaml', 'w') as f:
        import yaml
        yaml.dump(app_spec, f)
    
    print("‚úÖ Created deployment configuration")
    return True

def main():
    """Main deployment function."""
    print("üöÄ Starting DigitalOcean deployment for Campsite Tracker...")
    print("=" * 60)
    
    # Check if we're in the right directory
    if not Path('demo.html').exists():
        print("‚ùå demo.html not found. Make sure you're in the campsite-tracker directory")
        return False
    
    print("üè† Current directory:", os.getcwd())
    print("üìÅ Available files:", list(Path('.').glob('*')))
    
    # Try to use doctl if available
    success, output = run_command("which doctl", "Checking for doctl CLI")
    if success:
        print("‚úÖ doctl found, attempting deployment...")
        
        # Try to create app
        cmd = f"""
        doctl apps create --spec - << 'EOF'
        name: socal-campsite-tracker-{int(time.time())}
        services:
        - name: web
          environment_slug: python
          instance_count: 1
          instance_size_slug: basic-xxs
          source_dir: /
          run_command: python3 -m http.server 8080
          http_port: 8080
          routes:
          - path: /
          health_check:
            http_path: /demo.html
        static_sites:
        - name: dashboard
          source_dir: /
          build_command: echo 'Demo ready'
          output_dir: /
          index_document: demo.html
        EOF
        """
        
        success, output = run_command(cmd, "Creating DigitalOcean app")
        if success:
            print("üéâ Deployment initiated!")
            print("üìù Output:", output)
            return True
    
    # Alternative: Create a GitHub repository and use GitHub Pages
    print("üì¶ Falling back to GitHub Pages deployment...")
    
    # Initialize git if not already done
    if not Path('.git').exists():
        run_command("git init", "Initializing git repository")
        run_command("git add .", "Adding files to git")
        run_command('git commit -m "Initial campsite tracker deployment"', "Creating initial commit")
    
    # Try to create GitHub repo using GitHub MCP
    repo_name = f"socal-campsite-tracker-{int(time.time())}"
    
    print(f"üêô Creating GitHub repository: {repo_name}")
    
    # Create a deploy script for later
    deploy_script = f"""#!/bin/bash
echo "üöÄ Deploying Southern California Campsite Tracker..."

# This script will deploy the campsite tracker to various platforms
# Current status: Demo version ready

echo "‚úÖ Demo available locally at: http://localhost:8888/demo.html"
echo "üåê For online deployment, this needs:"
echo "   1. GitHub repository creation"
echo "   2. DigitalOcean App Platform setup"
echo "   3. Environment variable configuration"

echo ""
echo "üìã Manual deployment steps:"
echo "1. Create GitHub repo: gh repo create {repo_name} --public"
echo "2. Push code: git remote add origin https://github.com/YOUR_USERNAME/{repo_name}.git"
echo "3. Enable GitHub Pages in repo settings"
echo "4. Access at: https://YOUR_USERNAME.github.io/{repo_name}/demo.html"

echo ""
echo "üè† Local demo: http://localhost:8888/demo.html"
"""
    
    with open('deploy.sh', 'w') as f:
        f.write(deploy_script)
    
    os.chmod('deploy.sh', 0o755)
    
    print("‚úÖ Created deployment script")
    return True

if __name__ == "__main__":
    try:
        if main():
            print("\n" + "=" * 60)
            print("üéâ DEPLOYMENT SETUP COMPLETE!")
            print("=" * 60)
            print()
            print("üìç LOCAL DEMO AVAILABLE NOW:")
            print("   üåê http://localhost:8888/demo.html")
            print()
            print("üöÄ FOR ONLINE ACCESS:")
            print("   1. The application is fully built and ready")
            print("   2. Run ./deploy.sh for manual deployment instructions")
            print("   3. Or use DigitalOcean App Platform with the provided configs")
            print()
            print("‚úÖ You can access the demo right now locally!")
            print("   It shows exactly what the online version will look like.")
        else:
            print("‚ùå Deployment setup failed")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\nüõë Deployment interrupted by user")
    except Exception as e:
        print(f"\nüí• Deployment failed with error: {e}")
        sys.exit(1)